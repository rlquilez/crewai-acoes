"""
Aplica√ß√£o principal do sistema de an√°lise de a√ß√µes com CrewAI.
"""

import os
import sys
from datetime import datetime
from typing import Optional, Dict, Any
import argparse
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente ANTES de importar outros m√≥dulos
load_dotenv()

# Adiciona o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from crewai import Crew
from agents.market_agents import MarketAgents
from tasks.market_tasks import MarketTasks


class StockAnalysisApp:
    """Aplica√ß√£o principal para an√°lise de a√ß√µes."""
    
    def __init__(self, llm_provider: Optional[str] = None):
        """
        Inicializa a aplica√ß√£o.
        
        Args:
            llm_provider: Provedor de LLM a ser usado (openai, anthropic, deepseek, grok, ollama)
                         Se None, usa o provedor configurado em DEFAULT_LLM
        """
        # Verifica se as APIs est√£o configuradas
        self._check_api_keys()
        
        # Inicializa componentes
        self.market_agents = MarketAgents(llm_provider)
        self.market_tasks = MarketTasks()
        
        # Cria diret√≥rio de relat√≥rios se n√£o existir
        os.makedirs('reports', exist_ok=True)
        
        # Determina qual provedor est√° sendo usado para display
        from src.config.llm_config import llm_manager
        current_provider = llm_manager.default_provider.value if llm_provider is None else llm_provider
        current_config = llm_manager.get_config(llm_provider)
        
        print("üöÄ Sistema de An√°lise de A√ß√µes CrewAI inicializado!")
        print(f"üìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
        print(f"ü§ñ Provedor LLM: {current_provider}")
        print(f"üß† Modelo: {current_config.model}")
        print("-" * 60)

    def _check_api_keys(self):
        """Verifica se as chaves de API est√£o configuradas."""
        required_keys = {
            'ANTHROPIC_API_KEY': 'Anthropic (Claude)',
            'GOOGLE_API_KEY': 'Google Search (opcional)',
            'NEWS_API_KEY': 'News API (opcional)'
        }
        
        missing_keys = []
        for key, service in required_keys.items():
            if not os.getenv(key):
                if 'opcional' not in service:
                    missing_keys.append(f"{key} ({service})")
                else:
                    print(f"‚ö†Ô∏è  {key} n√£o configurada - {service}")
        
        if missing_keys:
            print("‚ùå Chaves de API obrigat√≥rias n√£o encontradas:")
            for key in missing_keys:
                print(f"   - {key}")
            print("\nüí° Configure as vari√°veis no arquivo .env")
            sys.exit(1)
        else:
            print("‚úÖ Chaves de API configuradas corretamente")

    def analyze_stock(self, symbol: str, analysis_type: str = "complete") -> Dict[str, Any]:
        """
        Realiza an√°lise completa de uma a√ß√£o.
        
        Args:
            symbol: S√≠mbolo da a√ß√£o (ex: PETR4.SA)
            analysis_type: Tipo de an√°lise (complete, quick, technical, fundamental)
            
        Returns:
            Dict com resultados da an√°lise
        """
        print(f"\nüìä Iniciando an√°lise de {symbol}")
        print(f"üîç Tipo de an√°lise: {analysis_type}")
        print("=" * 60)
        
        try:
            # Cria os agentes
            agents = self._create_agents_for_analysis(analysis_type)
            
            # Cria as tarefas
            tasks = self._create_tasks_for_analysis(symbol, agents, analysis_type)
            
            # Cria e executa o crew
            crew = Crew(
                agents=list(agents.values()),
                tasks=list(tasks.values()),
                verbose=True,
                memory=True,
                planning=True,
                max_execution_time=3600,  # 1 hora
                output_log_file=f"reports/execution_log_{symbol}_{datetime.now().strftime('%Y%m%d_%H%M')}.log"
            )
            
            print(f"üé¨ Executando an√°lise com {len(agents)} agentes...")
            result = crew.kickoff()
            
            print(f"\n‚úÖ An√°lise de {symbol} conclu√≠da com sucesso!")
            print(f"üìÅ Relat√≥rios salvos na pasta 'reports/'")
            
            return {
                'symbol': symbol,
                'analysis_type': analysis_type,
                'result': result,
                'timestamp': datetime.now().isoformat(),
                'agents_used': list(agents.keys()),
                'tasks_completed': list(tasks.keys())
            }
            
        except Exception as e:
            print(f"‚ùå Erro durante an√°lise de {symbol}: {str(e)}")
            return {
                'symbol': symbol,
                'analysis_type': analysis_type,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def _create_agents_for_analysis(self, analysis_type: str) -> Dict[str, Any]:
        """Cria agentes baseado no tipo de an√°lise."""
        agents = {}
        
        if analysis_type in ['complete', 'quick']:
            agents['research'] = self.market_agents.create_research_analyst()
            agents['fundamental'] = self.market_agents.create_fundamental_analyst()
            agents['technical'] = self.market_agents.create_technical_analyst()
            agents['consultant'] = self.market_agents.create_investment_consultant()
            
            if analysis_type == 'complete':
                agents['daytrader'] = self.market_agents.create_daytrader_consultant()
                
        elif analysis_type == 'technical':
            agents['research'] = self.market_agents.create_research_analyst()
            agents['technical'] = self.market_agents.create_technical_analyst()
            
        elif analysis_type == 'fundamental':
            agents['research'] = self.market_agents.create_research_analyst()
            agents['fundamental'] = self.market_agents.create_fundamental_analyst()
            
        return agents

    def _create_tasks_for_analysis(self, symbol: str, agents: Dict, analysis_type: str) -> Dict[str, Any]:
        """Cria tarefas baseado no tipo de an√°lise."""
        tasks = {}
        
        # Tarefa de pesquisa sempre presente
        research_task = self.market_tasks.create_research_task(symbol, agents['research'])
        tasks['research'] = research_task
        
        if 'fundamental' in agents:
            tasks['fundamental'] = self.market_tasks.create_fundamental_analysis_task(
                symbol, agents['fundamental'], research_task
            )
        
        if 'technical' in agents:
            tasks['technical'] = self.market_tasks.create_technical_analysis_task(
                symbol, agents['technical'], research_task
            )
        
        if 'daytrader' in agents:
            tasks['daytrader'] = self.market_tasks.create_daytrader_task(
                symbol, agents['daytrader'], research_task, tasks.get('technical')
            )
        
        if 'consultant' in agents:
            previous_tasks = [task for key, task in tasks.items() if key != 'research']
            previous_tasks.insert(0, research_task)  # Adiciona research task no in√≠cio
            
            tasks['final_recommendation'] = self.market_tasks.create_investment_recommendation_task(
                symbol, agents['consultant'], previous_tasks
            )
        
        return tasks

    def batch_analyze(self, symbols: list, analysis_type: str = "quick") -> Dict[str, Any]:
        """
        Realiza an√°lise em lote de m√∫ltiplas a√ß√µes.
        
        Args:
            symbols: Lista de s√≠mbolos para analisar
            analysis_type: Tipo de an√°lise
            
        Returns:
            Dict com resultados de todas as an√°lises
        """
        print(f"\nüìä Iniciando an√°lise em lote de {len(symbols)} a√ß√µes")
        print(f"üîç S√≠mbolos: {', '.join(symbols)}")
        print(f"üîç Tipo: {analysis_type}")
        print("=" * 60)
        
        results = {}
        successful = 0
        failed = 0
        
        for i, symbol in enumerate(symbols, 1):
            print(f"\n[{i}/{len(symbols)}] Processando {symbol}...")
            
            try:
                result = self.analyze_stock(symbol, analysis_type)
                results[symbol] = result
                
                if 'error' in result:
                    failed += 1
                    print(f"‚ùå Falha na an√°lise de {symbol}")
                else:
                    successful += 1
                    print(f"‚úÖ An√°lise de {symbol} conclu√≠da")
                    
            except Exception as e:
                results[symbol] = {
                    'symbol': symbol,
                    'error': str(e),
                    'timestamp': datetime.now().isoformat()
                }
                failed += 1
                print(f"‚ùå Erro cr√≠tico na an√°lise de {symbol}: {str(e)}")
        
        print(f"\nüìà An√°lise em lote conclu√≠da!")
        print(f"‚úÖ Sucessos: {successful}")
        print(f"‚ùå Falhas: {failed}")
        print(f"üìÅ Relat√≥rios salvos na pasta 'reports/'")
        
        return {
            'batch_summary': {
                'total_symbols': len(symbols),
                'successful': successful,
                'failed': failed,
                'analysis_type': analysis_type,
                'timestamp': datetime.now().isoformat()
            },
            'results': results
        }

    def list_available_symbols(self) -> list:
        """Lista alguns s√≠mbolos populares da B3."""
        popular_symbols = [
            'PETR4.SA',  # Petrobras
            'VALE3.SA',  # Vale
            'ITUB4.SA',  # Ita√∫
            'BBDC4.SA',  # Bradesco
            'ABEV3.SA',  # Ambev
            'WEGE3.SA',  # WEG
            'MGLU3.SA',  # Magazine Luiza
            'RENT3.SA',  # Localiza
            'LREN3.SA',  # Lojas Renner
            'JBSS3.SA',  # JBS
            'SUZB3.SA',  # Suzano
            'VIVT3.SA',  # Telef√¥nica
            'GGBR4.SA',  # Gerdau
            'USIM5.SA',  # Usiminas
            'CSNA3.SA',  # CSN
        ]
        
        return popular_symbols


def main():
    """Fun√ß√£o principal da aplica√ß√£o."""
    parser = argparse.ArgumentParser(description='Sistema de An√°lise de A√ß√µes CrewAI')
    parser.add_argument('symbol', nargs='?', help='S√≠mbolo da a√ß√£o (ex: PETR4.SA)')
    parser.add_argument('--type', choices=['complete', 'quick', 'technical', 'fundamental'], 
                       default='quick', help='Tipo de an√°lise')
    parser.add_argument('--batch', nargs='*', help='An√°lise em lote (lista de s√≠mbolos)')
    parser.add_argument('--list-symbols', action='store_true', help='Lista s√≠mbolos populares')
    parser.add_argument('--model', default=None, help='Provedor LLM (openai, anthropic, deepseek, grok, ollama)')
    
    args = parser.parse_args()
    
    # Inicializa aplica√ß√£o
    app = StockAnalysisApp(args.model) if args.model else StockAnalysisApp()
    
    if args.list_symbols:
        symbols = app.list_available_symbols()
        print("\nüìã S√≠mbolos populares da B3:")
        for symbol in symbols:
            print(f"   ‚Ä¢ {symbol}")
        return
    
    if args.batch:
        # An√°lise em lote
        results = app.batch_analyze(args.batch, args.type)
        print(f"\nüìä Resultados salvos em arquivos individuais")
        
    elif args.symbol:
        # An√°lise individual
        result = app.analyze_stock(args.symbol, args.type)
        if 'error' not in result:
            print(f"\nüìä An√°lise de {args.symbol} conclu√≠da com sucesso!")
        else:
            print(f"\n‚ùå Erro na an√°lise: {result['error']}")
    
    else:
        # Modo interativo
        print("\nüéØ Modo Interativo")
        print("Digite o s√≠mbolo da a√ß√£o (ex: PETR4.SA) ou 'quit' para sair:")
        
        while True:
            try:
                symbol = input("\n> S√≠mbolo: ").strip().upper()
                
                if symbol.lower() in ['quit', 'q', 'exit']:
                    print("üëã At√© logo!")
                    break
                
                if not symbol:
                    continue
                
                # Adiciona .SA se n√£o estiver presente
                if not symbol.endswith('.SA'):
                    symbol += '.SA'
                
                print(f"\nüîç Analisando {symbol}...")
                result = app.analyze_stock(symbol, 'quick')
                
                if 'error' not in result:
                    print(f"‚úÖ An√°lise conclu√≠da! Verifique os relat√≥rios em 'reports/'")
                else:
                    print(f"‚ùå Erro: {result['error']}")
                
            except KeyboardInterrupt:
                print("\n\nüëã At√© logo!")
                break
            except Exception as e:
                print(f"‚ùå Erro inesperado: {str(e)}")


if __name__ == "__main__":
    main()
