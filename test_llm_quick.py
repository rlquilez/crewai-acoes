#!/usr/bin/env python3
"""
Teste r√°pido para verificar se o problema do LLM foi resolvido
"""

import os
import sys
from pathlib import Path

# Carrega vari√°veis de ambiente
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úì dotenv carregado")
except ImportError:
    print("‚ö†Ô∏è python-dotenv n√£o dispon√≠vel")

# Adiciona src ao path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

def test_llm_configuration():
    """Testa se a configura√ß√£o de LLM est√° correta"""
    print("=== TESTE DE CONFIGURA√á√ÉO LLM ===")
    print()
    
    # Testa importa√ß√£o dos agentes
    try:
        from agents.market_agents import MarketAgents
        
        print("‚úì Importa√ß√£o dos agentes: OK")
        
        # Cria inst√¢ncia dos agentes
        market_agents = MarketAgents()
        print(f"‚úì Agentes criados com LLM: {type(market_agents.llm).__name__}")
        
        # Verifica o modelo do LLM
        if hasattr(market_agents.llm, 'model'):
            print(f"‚úì Modelo configurado: {market_agents.llm.model}")
        elif hasattr(market_agents.llm, 'model_name'):
            print(f"‚úì Modelo configurado: {market_agents.llm.model_name}")
        
        # Cria um agente de teste
        test_agent = market_agents.create_research_analyst()
        print(f"‚úì Agente criado: {test_agent.role}")
        print(f"‚úì LLM do agente: {type(test_agent.llm).__name__}")
        
        if hasattr(test_agent.llm, 'model'):
            print(f"‚úì Modelo do agente: {test_agent.llm.model}")
        elif hasattr(test_agent.llm, 'model_name'):
            print(f"‚úì Modelo do agente: {test_agent.llm.model_name}")
            
        return True
        
    except Exception as e:
        print(f"‚úó Erro ao testar agentes: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_crew_creation():
    """Testa cria√ß√£o de crew com Deepseek"""
    print("\n=== TESTE DE CRIA√á√ÉO CREW ===")
    print()
    
    try:
        from agents.market_agents import MarketAgents
        from tasks.market_tasks import MarketTasks
        from crewai import Crew
        from config import get_llm
        
        # Cria componentes
        market_agents = MarketAgents()
        market_tasks = MarketTasks()
        crew_llm = get_llm()
        
        print(f"‚úì LLM do Crew: {type(crew_llm).__name__}")
        
        # Cria agente de teste
        agent = market_agents.create_research_analyst()
        task = market_tasks.create_research_task("PETR4.SA", agent)
        
        # Cria crew m√≠nimo
        crew = Crew(
            agents=[agent],
            tasks=[task],
            verbose=False,
            planning=False,
            manager_llm=crew_llm
        )
        
        print("‚úì Crew criado com sucesso")
        print(f"‚úì Manager LLM: {type(crew.manager_llm).__name__ if hasattr(crew, 'manager_llm') else 'N√£o definido'}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Erro ao criar crew: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Executa todos os testes"""
    print("üß™ TESTE R√ÅPIDO DE LLM")
    print("=" * 40)
    
    # Verifica vari√°veis de ambiente
    print(f"DEFAULT_LLM: {os.getenv('DEFAULT_LLM', 'N√ÉO DEFINIDO')}")
    print(f"DEEPSEEK_MODEL: {os.getenv('DEEPSEEK_MODEL', 'N√ÉO DEFINIDO')}")
    print()
    
    # Executa testes
    llm_ok = test_llm_configuration()
    crew_ok = test_crew_creation()
    
    print()
    print("=" * 40)
    print("üìä RESULTADO:")
    print(f"LLM Config: {'‚úì' if llm_ok else '‚úó'}")
    print(f"Crew Config: {'‚úì' if crew_ok else '‚úó'}")
    
    if llm_ok and crew_ok:
        print("\nüéâ CONFIGURA√á√ÉO OK!")
        print("Pode executar: python main.py PETR4.SA")
    else:
        print("\n‚ùå PROBLEMAS ENCONTRADOS")
        print("Verifique os erros acima")

if __name__ == "__main__":
    main()